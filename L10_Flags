/*---------------------------------------------------------------------------------------------*/
/* 在peak上插旗子，找出最多可插幾面旗子，若旗子為N面，則每個被插旗子的peak的距離要>=N                */
/*    A[0] = 1                                                                                 */
/*    A[1] = 5                                                                                 */
/*    A[2] = 3                                                                                 */
/*    A[3] = 4                                                                                 */
/*    A[4] = 3                                                                                 */
/*    A[5] = 4                                                                                 */
/*    A[6] = 1                                                                                 */
/*    A[7] = 2                                                                                 */
/*    A[8] = 3                                                                                 */
/*    A[9] = 4                                                                                 */
/*    A[10] = 6                                                                                */
/*    A[11] = 2                                                                                */
/*    return 3(最多可插3面旗子)                                                                 */
/*---------------------------------------------------------------------------------------------*/

int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    vector<int> peak;
    int N = A.size();
    
    // Find peaks
    for(int i = 1; i < N-1; i++)
    {
        if(A[i] > A[i-1] && A[i] > A[i+1]) peak.push_back(i);
    }
    
    int K = peak.size();
    if(K <= 1) return K;
    
    int ans = 0;
    for(int i = 1; i * (i-1) <= N; i++)
    {
        int flags = 0;
        int curr = peak[0];
        for(int j = 0; j < K; j++)
        {
            if(j == 0) flags++;
            else if(peak[j] - curr >= i)
            {
                flags++;
                curr = peak[j];
                
            }
            if(flags == i) break;
        }
        if(flags < i) break;
        ans = max(ans, flags); 
    }
    return ans;
}
